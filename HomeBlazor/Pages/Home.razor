@page "/"

@using HomeBlazor.Models
@using HomeBlazor.Services

@inject WeatherViewService weatherViewService
@inject DeviceService deviceService

<div class="conteiner">
    <PageTitle>Home</PageTitle>
    <h1>Sensors</h1>
    <div class="CardList">

        @if (!isWeatherLoaded)
        {
            <p><em>Loading...</em></p>
        }
        else
        {

            <div class="card">
                <h2 class="CardTitle">Temperature</h2>
                <h1 class="WeatherValue">@weatherViewService.Current.Temperature°</h1>
                <a class="CardButton" href="/Chart/Temperature">Go to chart -></a>
            </div>
            <div class="card">
                <h2 class="CardTitle">Pressure</h2>
                <h1 class="WeatherValue">@weatherViewService.Current.Pressure</h1>
                <a class="CardButton" href="/Chart/Pressure">Go to chart -></a>
            </div>
        }

    </div>
    <h1>Led Strips</h1>
    <div class="CardList">
        @if (!isDevicesLoaded)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var device in devices)
            {
                <div class="card">
                    <h4 class="DeviceCardTitle">@device.DisplayName</h4>
                    <a class="CardButton" href="/LedController/@device.DisplayName">Go to to management -></a>
                </div>
            }
        }
    </div>
</div>

@code
{
    List<Device> devices;
    private bool isWeatherLoaded => weatherViewService.Current is not null;
    private bool isDevicesLoaded => devices is not null;

    protected override async Task OnInitializedAsync()
    {
        weatherViewService.Updated += this.OnUpdated;
        devices = await deviceService.GetDevicesAsync();
    }

    private void OnUpdated() => this.InvokeAsync(this.StateHasChanged);

    public void Dispose()
    {
        weatherViewService.Updated -= this.OnUpdated;
    }
}
