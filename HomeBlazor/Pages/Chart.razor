@page "/Chart"
@page "/Chart/{Type}"

@using HomeBlazor.Models
@using HomeBlazor.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage BrowserStorage
@inject WeatherViewService weatherViewService

<PageTitle>Chart</PageTitle>

<div>
    <div class="input-box">
        <Span>Time Range</Span>
        <Select TValue="int" SelectedValueChanged="@OnSelectedTimeChanged" SelectedValue="@currentSelectedTime">
            <SelectItem Value="1">1 Hour</SelectItem>
            <SelectItem Value="2">2 Hour</SelectItem>
            <SelectItem Value="3">3 Hour</SelectItem>
            <SelectItem Value="6">6 Hour</SelectItem>
            <SelectItem Value="12">12 Hour</SelectItem>
            <SelectItem Value="24">24 Hour</SelectItem>
        </Select>

        <Span>Vertical</Span>
        <Select TValue="ChartParameter" SelectedValueChanged="@OnSelectedChartParameterYChanged" SelectedValue="@currentChartParameterY">
            <SelectItem Value="ChartParameter.Temperature">Temperature</SelectItem>
            <SelectItem Value="ChartParameter.Pressure">Pressure</SelectItem>
        </Select>

        <Span>Horizontal</Span>
        <Select TValue="ChartParameter" SelectedValueChanged="@OnSelectedChartParameterXChanged" SelectedValue="@currentChartParameterX">
            <SelectItem Value="ChartParameter.Temperature">Temperature</SelectItem>
            <SelectItem Value="ChartParameter.Pressure">Pressure</SelectItem>
            <SelectItem Value="ChartParameter.Time">Time</SelectItem>
        </Select>
    </div>

    <div class="chart">
        <LineChart @ref="lineChart" TItem="float" />
    </div>
</div>

@code
{
    private LineChart<float> lineChart;
    private int currentSelectedTime = 6;
    private ChartParameter currentChartParameterX = ChartParameter.Time;
    private ChartParameter currentChartParameterY = ChartParameter.Temperature;

    [Parameter]
    public string Type { get; set; }

    protected override void OnInitialized()
    {
    }

    private void HandleInputParameter()
    {
        switch (Type)
        {
            case "Temperature":
                currentChartParameterY = ChartParameter.Temperature;
                break;
            case "Pressure":
                currentChartParameterY = ChartParameter.Pressure;
                break;
            default:
                break;
        }
        currentChartParameterX = ChartParameter.Time;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Init();
            await HandleRedraw();
        }
    }

    private async Task Init()
    {
        if (!string.IsNullOrEmpty(Type))
        {
            HandleInputParameter();
            await BrowserStorage.SetAsync("LastYParameter", currentChartParameterY);
            await BrowserStorage.SetAsync("LastXParameter", currentChartParameterX);
        }
        else
        {
            var yResult = await BrowserStorage.GetAsync<int>("LastYParameter");
            int y = yResult.Success ? yResult.Value : (int)ChartParameter.Temperature;
            currentChartParameterY = (ChartParameter)y;

            var xResult = await BrowserStorage.GetAsync<int>("LastXParameter");
            int x = xResult.Success ? xResult.Value : (int)ChartParameter.Time;
            currentChartParameterX = (ChartParameter)x;
        }

        var lastTimeResult = await BrowserStorage.GetAsync<int>("LastSelectedTime");
        int lastTime = lastTimeResult.Success ? lastTimeResult.Value : 6;
        currentSelectedTime = lastTime;
        StateHasChanged();
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        var chartData = weatherViewService.GetChartData(currentChartParameterY, currentChartParameterX, DateTime.Now.AddHours(-1 * currentSelectedTime));

        var colors = Enumerable.Repeat<string>(ChartColor.FromRgba(15, 10, 222, 1).ToJsRgba(), chartData.Horizontal.Count).ToArray();

        var chartDataset = new LineChartDataset<float>
            {
                Data = chartData.Vertical,
                Fill = false,
                PointBackgroundColor = colors,
                BackgroundColor = colors,
                BorderColor = colors,
                PointBorderColor = colors,
                PointRadius = 1
            };

        LineChartOptions lineChartOptions = new LineChartOptions
            {
                Plugins = new ChartPlugins
                {
                    Legend = new ChartLegend
                    {
                        Display = false
                    }
                }
            };
        lineChart.SetOptions(lineChartOptions);
        await lineChart.AddLabelsDatasetsAndUpdate(chartData.Horizontal, chartDataset);
    }

    async Task OnSelectedTimeChanged(int value)
    {
        currentSelectedTime = value;
        await BrowserStorage.SetAsync("LastSelectedTime", currentSelectedTime);
        await HandleRedraw();
    }

    async Task OnSelectedChartParameterXChanged(ChartParameter value)
    {
        currentChartParameterX = value;
        await BrowserStorage.SetAsync("LastXParameter", currentChartParameterX);
        await HandleRedraw();
    }

    async Task OnSelectedChartParameterYChanged(ChartParameter value)
    {
        currentChartParameterY = value;
        await BrowserStorage.SetAsync("LastYParameter", currentChartParameterY);
        await HandleRedraw();
    }
}
